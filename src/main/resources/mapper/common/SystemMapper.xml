<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.leepay.payrollcalc.mapper.SystemMapper">

    <resultMap id="AdminUserResultMap" type="AdminUser">
        <result property="id" column="ID"/>
        <result property="username" column="USERNAME"/>
        <result property="email" column="EMAIL"/>
        <result property="password" column="PASSWORD"/>
        <result property="enabled" column="ENABLED"/>
        <collection property="roles" ofType="java.lang.String">
            <result column="NAME"/>
        </collection>
    </resultMap>

    <select id="getAllMenu" resultType="menu">
        SELECT A.PAGE_SEQ
              ,A.PAGE_NAME
              ,A.PAGE_URL
              ,A.GNB_SORT
              ,A.GNB_NAME
              ,A.ROLE_ID
              ,A.PARENT_PAGE_SEQ
              ,A.LEVEL
              ,B.NAME AS ROLE_NAME
              ,A.ICON_CLASS
              ,A.COMPONENT_NAME
         FROM ADMIN_MENU A
         JOIN ADMIN_ROLES B
           ON B.ID = A.ROLE_ID
         ORDER BY GNB_SORT, LEVEL, PAGE_SEQ
    </select>

    <select id="getAdminUser" resultMap="AdminUserResultMap">
        SELECT
             A.ID
             ,A.USERNAME
             ,A.PASSWORD
             ,A.ENABLED
             ,C.NAME
        FROM ADMIN_USERS A
                 JOIN ADMIN_USER_ROLES B
                      ON A.ID = B.USER_ID
                 JOIN ADMIN_ROLES C
                      ON C.ID = B.ROLE_ID
        <choose>
            <when test="username != null and username != ''">
                WHERE A.USERNAME = #{username}
            </when>
            <!-- 오직 id만 제공된 경우 -->
            <when test="id != null">
                WHERE A.ID = #{id}
            </when>
        </choose>
    </select>

    <!-- 운영자 목록 조회 -->
    <select id="getAdminUserList" resultMap="AdminUserResultMap">
        SELECT A.ID
              ,A.USERNAME
              ,A.EMAIL
              ,A.PASSWORD
              ,A.ENABLED
              ,C.NAME
          FROM ADMIN_USERS       A
          JOIN ADMIN_USER_ROLES  B
            ON A.ID = B.USER_ID
          JOIN ADMIN_ROLES       C
            ON B.ROLE_ID = C.ID
    </select>

    <select id="getAdminUserByUsername" resultMap="AdminUserResultMap">
        SELECT
        A.ID
        ,A.USERNAME
        ,A.PASSWORD
        ,A.ENABLED
        ,C.NAME
        FROM ADMIN_USERS A
        JOIN ADMIN_USER_ROLES B
        ON A.ID = B.USER_ID
        JOIN ADMIN_ROLES C
        ON C.ID = B.ROLE_ID
        WHERE A.USERNAME = #{username}
    </select>

    <select id="getAdminUserById" resultMap="AdminUserResultMap">
        SELECT
            A.ID
             ,A.USERNAME
             ,A.PASSWORD
             ,A.ENABLED
             ,C.NAME
        FROM ADMIN_USERS A
                 JOIN ADMIN_USER_ROLES B
                      ON A.ID = B.USER_ID
                 JOIN ADMIN_ROLES C
                      ON C.ID = B.ROLE_ID
        WHERE A.ID = #{id}
    </select>

    <!-- 운영자 등록 및 수정 -->
    <insert id="upsertAdminInfo" parameterType="adminUser" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO ADMIN_USERS (USERNAME, EMAIL,  PASSWORD)
             VALUES (#{username}, #{email}, #{password})
                 ON CONFLICT (ID) DO UPDATE
                SET USERNAME = EXCLUDED.USERNAME,
                    EMAIL = EXCLUDED.EMAIL,
                    PASSWORD = EXCLUDED.PASSWORD
        RETURNING ID
    </insert>

    <!-- 운영자 등록시 권한 등록 -->
    <insert id="upsertAdminRoleInfo" parameterType="adminUser">
        INSERT INTO ADMIN_USER_ROLES (USER_ID, ROLE_ID)
             VALUES (#{id}, 1)
    </insert>


</mapper>